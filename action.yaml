name: 'Aqua Security Trivy'
description: 'Scans container images for vulnerabilities with Trivy'
author: 'Aqua Security'

inputs:
  scan-type:
    description: 'Scan type to use for scanning vulnerability'
    required: false
    default: 'image'
  image-ref:
    description: 'image reference(for backward compatibility)'
    required: false
  input:
    description: 'reference of tar file to scan'
    required: false
    default: ''
  scan-ref:
    description: 'Scan reference'
    required: false
    default: '.'
  exit-code:
    description: 'exit code when vulnerabilities were found'
    required: false
  ignore-unfixed:
    description: 'ignore unfixed vulnerabilities'
    required: false
    default: 'false'
  vuln-type: # TODO: rename to pkg-types
    description: 'comma-separated list of vulnerability types (os,library)'
    required: false
    default: 'os,library'
  severity:
    description: 'severities of vulnerabilities to be displayed'
    required: false
    default: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
  format:
    description: 'output format (table, json, template)'
    required: false
    default: 'table'
  template:
    description: 'use an existing template for rendering output (@/contrib/gitlab.tpl, @/contrib/junit.tpl, @/contrib/html.tpl)'
    required: false
    default: ''
  output:
    description: 'writes results to a file with the specified file name'
    required: false
    default: ''
  skip-dirs:
    description: 'comma separated list of directories where traversal is skipped'
    required: false
    default: ''
  skip-files:
    description: 'comma separated list of files to be skipped'
    required: false
    default: ''
  cache-dir:
    description: 'specify where the cache is stored'
    required: false
    default: '${{ github.workspace }}/.cache/trivy'
  timeout:
    description: 'timeout (default 5m0s)'
    required: false
    default: ''
  ignore-policy:
    description: 'filter vulnerabilities with OPA rego language'
    required: false
    default: ''
  hide-progress:
    description: 'suppress progress bar and log output'
    required: false
  list-all-pkgs:
    description: 'output all packages regardless of vulnerability'
    required: false
    default: 'false'
  scanners:
    description: 'comma-separated list of what security issues to detect'
    required: false
    default: ''
  trivyignores:
    description: 'comma-separated list of relative paths in repository to one or more .trivyignore files'
    required: false
    default: ''
  github-pat:
    description: 'GitHub Personal Access Token (PAT) for submitting SBOM to GitHub Dependency Snapshot API'
    required: false
  trivy-config:
    description: 'path to trivy.yaml config'
    required: false
  tf-vars:
    description: "path to terraform tfvars file"
    required: false
  limit-severities-for-sarif:
    description: 'limit severities for SARIF format'
    required: false
  docker-host:
    description: 'unix domain socket path to use for docker scanning, ex. unix:///var/run/docker.sock'
    required: false
  version:
    description: 'Trivy version to use'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Install Trivy
      shell: bash
      run: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin ${{ inputs.version }}

    - name: Restore DB from cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.cache-dir }}
        key: cache-trivy-db-${{ github.run_id }}
        restore-keys: cache-trivy-db- # In most cases, the cache is restored by 'restore-keys'.

    - name: Set GitHub Path
      run: echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}

    - name: Run Trivy
      shell: bash
      run: entrypoint.sh
      env:
        # For shell script
        # > If the action is written using a composite, then it will not automatically get INPUT_<VARIABLE_NAME>
        # cf. https://docs.github.com/en/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions#example-specifying-inputs
        INPUT_SCAN_TYPE: ${{ inputs.scan-type }}
        INPUT_IMAGE_REF: ${{ inputs.image-ref }}
        INPUT_SCAN_REF: ${{ inputs.scan-ref }}
        INPUT_TRIVYIGNORES: ${{ inputs.trivyignores }}
        INPUT_GITHUB_PAT: ${{ inputs.github-pat }}
        INPUT_LIMIT_SEVERITIES_FOR_SARIF: ${{ inputs.limit-severities-for-sarif }}

        # For Trivy
        # cf. https://aquasecurity.github.io/trivy/latest/docs/configuration/#environment-variables
        TRIVY_INPUT: ${{ inputs.input }}
        TRIVY_EXIT_CODE: ${{ inputs.exit-code }}
        TRIVY_IGNORE_UNFIXED: ${{ inputs.ignore-unfixed }}
        TRIVY_PKG_TYPES: ${{ inputs.vuln-type }}
        TRIVY_SEVERITY: ${{ inputs.severity }}
        TRIVY_FORMAT: ${{ inputs.format }}
        TRIVY_TEMPLATE: ${{ inputs.template }}
        TRIVY_OUTPUT: ${{ inputs.output }}
        TRIVY_SKIP_DIRS: ${{ inputs.skip-dirs }}
        TRIVY_SKIP_FILES: ${{ inputs.skip-files }}
        TRIVY_CACHE_DIR: ${{ inputs.cache-dir }}
        TRIVY_TIMEOUT: ${{ inputs.timeout }}
        TRIVY_IGNORE_POLICY: ${{ inputs.ignore-policy }}
        TRIVY_QUIET: ${{ inputs.hide-progress }}
        TRIVY_LIST_ALL_PKGS: ${{ inputs.list-all-pkgs }}
        TRIVY_SCANNERS: ${{ inputs.scanners }}
        TRIVY_CONFIG: ${{ inputs.trivy-config }}
        TRIVY_TF_VARS: ${{ inputs.tf-vars }}
        TRIVY_DOCKER_HOST: ${{ inputs.docker-host }}